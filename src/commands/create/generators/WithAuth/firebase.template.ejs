import { auth } from '@/lib/firebase';
import { onAuthStateChanged, User } from 'firebase/auth';
import { forbidden, unauthorized } from 'next/navigation';

type Role = 'admin' | 'user' | 'all';

export default async function withAuth<T>(
  fn: () => Promise<T>,
  roles: Role[] = [],
  accessCheck?: (user: User) => Promise<boolean>
) {
  const stack = new Error().stack;
  const callerLine = stack?.split('\n')[2] || '';
  const methodMatch = callerLine.match(/at\s+(.*?)\s+\(/);
  const method = methodMatch ? methodMatch[1] : 'unknown method';

  if (roles.includes('all')) {
    return fn();
  }

  return new Promise<T>((resolve, reject) => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      unsubscribe();

      if (!user) {
        console.error(`Auth Error caused by ${method}`);
        reject(unauthorized());
        return;
      }

      try {
        const idTokenResult = await user.getIdTokenResult();
        const userRole = idTokenResult.claims.role as Role || 'user';

        if (!['admin', ...roles].includes(userRole)) {
          console.error(`Permission Error caused by ${method}`);
          reject(forbidden());
          return;
        }

        if (accessCheck && userRole !== 'admin') {
          const isAuthorized = await accessCheck(user);
          if (!isAuthorized) {
            console.error(`Custom Auth Check Failed by ${method}`);
            reject(forbidden());
            return;
          }
        }

        const result = await fn();
        resolve(result);
      } catch (error) {
        reject(error);
      }
    });
  });
} 