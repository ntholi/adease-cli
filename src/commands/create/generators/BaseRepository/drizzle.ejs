import { count, eq } from 'drizzle-orm';
import { NodePgDatabase } from 'drizzle-orm/node-postgres';
import { PgColumn, PgTable } from 'drizzle-orm/pg-core';

type ModelInsert<T extends PgTable> = T['$inferInsert'];
type ModelSelect<T extends PgTable> = T['$inferSelect']

class BaseRepository<
  TSchema extends Record<string, PgTable>,
  T extends PgTable,
  PK extends keyof T & keyof ModelSelect<T>
> {
  constructor(
    private db: NodePgDatabase<TSchema>,
    private table: T,
    private primaryKey: PK
  ) {}

  async create(data: ModelInsert<T>): Promise<ModelSelect<T>> {
    const [inserted] = await this.db
      .insert(this.table)
      .values(data)
      .returning();
    return inserted;
  }

  async find(id: ModelSelect<T>[PK]): Promise<ModelSelect<T> | undefined> {
    const [result] = await this.db
      .select()
      .from(this.table)
      .where(eq(this.table[this.primaryKey] as PgColumn, id))
      .limit(1);
    return result;
  }

  async exists(id: ModelSelect<T>[PK]): Promise<boolean> {
    const [result] = await this.db
      .select({ count: count() })
      .from(this.table)
      .where(eq(this.table[this.primaryKey] as PgColumn, id))
      .limit(1);
    return result?.count > 0;
  }

  async update(
    id: ModelSelect<T>[PK],
    data: Partial<ModelInsert<T>>
  ): Promise<ModelSelect<T>> {
    const [updated] = await this.db
      .update(this.table)
      .set(data)
      .where(eq(this.table[this.primaryKey] as PgColumn, id))
      .returning() as ModelSelect<T>[];
    return updated;
  }

  async delete(id: ModelSelect<T>[PK]): Promise<void> {
    await this.db
      .delete(this.table)
      .where(eq(this.table[this.primaryKey] as PgColumn, id));
  }

  async list(
    limit: number = 10,
    offset: number = 0
  ): Promise<ModelSelect<T>[]> {
    return await this.db.select().from(this.table).limit(limit).offset(offset);
  }

  async count(): Promise<number> {
    const result = await this.db.select({ count: count() }).from(this.table);
    return Number(result[0]?.count ?? 0);
  }

  async deleteAll(): Promise<void> {
    await this.db.delete(this.table);
  }
}

export default BaseRepository;
