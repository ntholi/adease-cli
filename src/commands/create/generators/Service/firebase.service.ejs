import { <%= TableName %> } from '@/db/schema/<%= tableName %>';
import <%= TableName %>Repository from './repository';
import withAuth from '@/server/base/withAuth';
import { QueryOptions } from '@/server/base/BaseRepository';

class <%- TableName %>Service {
  constructor(private readonly repository = new <%- TableName %>Repository()) {}

  async first() {
    return withAuth(async () => this.repository.findFirst(), []);
  }

  async get(id: string) {
    return withAuth(async () => this.repository.findById(id), []);
  }

  async getAll(params: QueryOptions) {
    return withAuth(async () => this.repository.findAll(params), []);
  }

  async create(data: Omit<<%= TableName %>, 'id'>) {
    return withAuth(async () => this.repository.create(data), []);
  }

  async update(id: string, data: Partial<Omit<<%= TableName %>, 'id'>>) {
    return withAuth(async () => this.repository.update(id, data), []);
  }

  async delete(id: string) {
    return withAuth(async () => this.repository.delete(id), []);
  }

  async count() {
    return withAuth(async () => this.repository.count(), []);
  }
}

export const <%- tableName %>Service = new <%- TableName %>Service(); 