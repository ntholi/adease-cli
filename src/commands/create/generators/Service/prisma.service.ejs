import { Prisma } from '@prisma/client';
import <%- TableName %>Repository from './repository';
import withAuth from '@/server/base/withAuth';

type <%= TableName %> = Prisma.<%- TableName %>CreateInput;

class <%- TableName %>Service {
  constructor(private readonly repository: <%- TableName %>Repository = new <%- TableName %>Repository()) {}

  async first() {
    return withAuth(async () => this.repository.findFirst(), []);
  }

  async get(id: <%- pkType %>) {
    return withAuth(async () => this.repository.findById(id), []);
  }

  async filter(
    page: number = 1,
    search = '',
    searchProperties: (keyof <%= TableName %>)[] = []
  ) {
    return withAuth(
      async () => this.repository.filter(page, search, searchProperties),
      []
    );
  }

  async create(data: <%= TableName %>) {
    return withAuth(async () => this.repository.create(data), []);
  }

  async update(id: <%- pkType %>, data: <%= TableName %>) {
    return withAuth(async () => this.repository.update(id, data), []);
  }

  async delete(id: <%- pkType %>) {
    return withAuth(async () => this.repository.delete(id), []);
  }

  async count() {
    return withAuth(async () => this.repository.count(), []);
  }
}

export const <%- tableName %>Service = new <%- TableName %>Service();
