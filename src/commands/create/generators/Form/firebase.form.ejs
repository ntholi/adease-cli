'use client';

import { useForm } from 'react-hook-form';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { create<%= TableName %>, update<%= TableName %> } from '../_actions/repository';
import { <%= TableName %> } from '@/db/schema/<%= tableName %>';

interface Props {
  <%= singular(tableName) %>?: <%= TableName %>;
}

export function <%= TableName %>Form({ <%= singular(tableName) %> }: Props) {
  const router = useRouter();
  const { register, handleSubmit } = useForm<Omit<<%= TableName %>, 'id' | 'createdAt' | 'updatedAt'>>({
    defaultValues: <%= singular(tableName) %>,
  });

  async function onSubmit(data: Omit<<%= TableName %>, 'id' | 'createdAt' | 'updatedAt'>) {
    if (<%= singular(tableName) %>) {
      await update<%= TableName %>(<%= singular(tableName) %>.id, data);
    } else {
      await create<%= TableName %>(data);
    }

    router.push('/<%= kebabCase(tableName) %>');
    router.refresh();
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <% fields.forEach(function(field) { %>
      <div className="space-y-2">
        <Label htmlFor="<%= field.name %>"><%= asWord(field.name) %></Label>
        <Input
          id="<%= field.name %>"
          {...register('<%= field.name %>'<% if (field.type === 'number') { %>, { valueAsNumber: true }<% } %>)}
          type="<%= field.type === 'number' ? 'number' : 'text' %>"
        />
      </div>
      <% }); %>

      <Button type="submit">
        {<%= singular(tableName) %> ? 'Update' : 'Create'} <%= TableWord %>
      </Button>
    </form>
  );
} 