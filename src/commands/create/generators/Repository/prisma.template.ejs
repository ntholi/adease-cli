import prisma from '@/lib/prisma';
import { Prisma } from '@prisma/client';

type <%= TableName %> = Prisma.<%- TableName %>CreateInput;

export interface FindAllParams<T extends SQLiteTable> {
  page?: number;
  search?: string;
  searchProperties?: (keyof ModelSelect<T>)[];
  orderBy?: OrderBy<T>[];
  pageSize?: number;
}

export default class <%= TableName %>Repository {
  async findFirst() {
    return await prisma.<%= singular(tableName) %>.findFirst();
  }

  async findById(id: <%- pkType %>) {
    return await prisma.<%= singular(tableName) %>.findUnique({
      where: { id },
    });
  }

  async getAll(limit?: number) {
    if(limit){
      return await prisma.<%= singular(tableName) %>.findMany({
        take: limit,
      });
    } else {
      return await prisma.<%= singular(tableName) %>.findMany();
    }
  }

  async findAll(params: FindAllParams<T>) {
    const {
      page = 1,
      search,
      searchProperties = [],
      pageSize = 15,
    } = params;

    try {
      const offset = (page - 1) * pageSize;
      let where = {};

      if (search && search.trim() !== '') {
        where = {
          OR: searchProperties.map((property) => ({
            [property]: {
              contains: search.trim(),
              mode: 'insensitive',
            },
          })),
        };
      }

      const [data, total] = await Promise.all([
        prisma.<%= singular(tableName) %>.findMany({
          where,
          skip: offset,
          take: pageSize,
        }),
        prisma.<%= singular(tableName) %>.count({ where }),
      ]);

      return {
        data,
        total,
        pages: Math.ceil(total / pageSize),
        currentPage: page,
      };
    } catch (error) {
      console.error('Search error:', error);
      throw new Error('Failed to perform search');
    }
  }

  async exists(id: <%- pkType %>) {
    const count = await prisma.<%= singular(tableName) %>.count({
      where: { id },
    });
    return count > 0;
  }

  async create(data: Prisma.<%= TableName %>CreateInput) {
    return await prisma.<%= singular(tableName) %>.create({
      data,
    });
  }

  async update(id: <%- pkType %>, data: Prisma.<%= TableName %>UpdateInput) {
    return await prisma.<%= singular(tableName) %>.update({
      where: { id },
      data,
    });
  }

  async delete(id: <%- pkType %>) {
    await prisma.<%= singular(tableName) %>.delete({
      where: { id },
    });
  }

  async count() {
    return await prisma.<%= singular(tableName) %>.count();
  }

  async deleteAll() {
    await prisma.<%= singular(tableName) %>.deleteMany();
  }
}

export const <%= tableName %>Repository = new <%= TableName %>Repository();
